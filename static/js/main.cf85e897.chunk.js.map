{"version":3,"sources":["helpers/global.js","helpers/components/Loader.jsx","components/maps/components/CurrentLocation.js","configurations/urls/mapUrl.js","components/maps/components/CustomMapMarker.js","components/maps/components/SearchPalces.js","components/maps/components/Map.js","components/maps/MapWrapper.js","components/maps/MapContainer.js","configurations/materialUI/theme.js","App.js","serviceWorker.js","index.js"],"names":["stateSetter","context","cancelled","cancel","setState","newState","callback","console","log","types","Loader","this","props","visible","CircularProgress","color","Component","defaultProps","CurrentLocation","refresh","window","location","reload","renderComponent","getLocation","isGeolocationAvailable","isGeolocationEnabled","state","initialLocationSet","Box","position","top","left","height","width","bgcolor","display","justifyContent","alignItems","p","Card","CardContent","Typography","variant","component","CardActions","Button","onClick","size","setter","coords","setCurrentLocation","latitude","longitude","geolocated","mapUrl","base","process","direction","CustomMapMarker","toggleInfo","infoShown","getDirection","marker","destination","encodeURIComponent","name","vicinity","open","place_id","lat","lng","onCloseClick","style","padding","textAlign","SearchPalces","onPlaceSelected","place","geometry","currentPostion","paddingLeft","marginTop","marginBottom","Map","ref","onMapMounted","defaultZoom","center","isMarkerShown","places","map","key","id","withScriptjs","withGoogleMap","MapWrapper","getCheckBox","type","index","isChecked","selectedTypes","includes","FormControlLabel","control","Checkbox","checked","onChange","filterChange","value","label","Grid","container","overflow","item","xs","sm","md","lg","currentLocation","googleMapURL","loadingElement","containerElement","mapElement","FormControl","FormLabel","FormGroup","MapContainer","fetchPlaces","then","loading","mapRef","event","target","push","_","findIndex","splice","Promise","resolve","reject","google","service","maps","PlacesService","__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","request","radius","nearbySearch","results","status","PlacesServiceStatus","OK","isEmpty","placeObj","icon","getComponent","theme","createMuiTheme","palette","responsiveFontSizes","App","NoSsr","defer","CssBaseline","ThemeProvider","Container","fluid","minHeight","boxShadow","borderRadius","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf85e897.chunk.js","sourcesContent":["export const stateSetter = (context) => {\n    let cancelled = false;\n    return {\n        cancel: () => {\n            cancelled = true\n        },\n        setState: (newState, callback = () => { }) => {\n            console.log(cancelled)\n            if (!cancelled) {\n                context.setState(newState, callback);\n            }\n        }\n    }\n}\n\nexport const types = ['atm', 'bank', 'pharmacy', 'hospital', 'airport', 'local_government_office', 'train_station', 'bus_station'] ","import CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nexport default class Loader extends Component {\n    static propTypes = {\n        visible: PropTypes.bool\n    }\n\n    static defaultProps = {\n        visible: true\n    }\n    render() {\n        return (\n            this.props.visible && <CircularProgress color=\"primary\" />\n        )\n    }\n}\n","import Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Loader from 'helpers/components/Loader';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { geolocated, geoPropTypes } from \"react-geolocated\";\nimport { stateSetter } from '../../../helpers/global';\n\nclass CurrentLocation extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            initialLocationSet: false\n        }\n        this.setter = stateSetter(this)\n    }\n    \n    static propTypes = {\n        ...geoPropTypes,\n        setCurrentLocation: PropTypes.func.isRequired,\n        getLocation: PropTypes.bool\n    }\n\n    static defaultProps = {\n        getLocation: true\n    }\n\n    componentDidMount() {\n        // console.log(window.navigator.geolocation)\n    }\n\n    componentDidUpdate() {\n        if (\n            this.props.getLocation &&\n            this.props.isGeolocationAvailable &&\n            this.props.isGeolocationEnabled && \n            !this.state.initialLocationSet\n            \n        ) {\n            console.log(\"!this.state.initialLocationSet\", !this.state.initialLocationSet)\n            if (\n                this.props.coords \n                \n            ) {\n                this.setter.setState({ initialLocationSet: true }, () => { \n                    console.log('calling if setCurrentLocation', this.props.coords)\n                    this.props.setCurrentLocation(this.props.coords)\n                })\n            } else {\n                this.setter.setState({ initialLocationSet: true }, () => { \n                    console.log('calling else setCurrentLocation')\n                    this.props.setCurrentLocation({\n                        latitude: 18.9908177,\n                        longitude: 72.8382547\n                    }) \n                }) \n            }\n        } \n    }\n\n    componentWillUnmount() {\n        this.setter.cancel()\n    }\n\n    refresh = () => {\n        window.location.reload()\n    }\n\n    renderComponent = () => {\n        if (this.props.getLocation && (!this.props.isGeolocationAvailable || !this.props.isGeolocationEnabled)) {\n            return (\n                <Box\n                    position={'absolute'}\n                    top={0}\n                    left={0}\n                    height={'100vh'}\n                    width={'100vw'}\n                    bgcolor={'rgba(255,255,255, 0.7)'}\n                    display={'flex'}\n                    justifyContent={'center'}\n                    alignItems={'center'}\n                    p={4}\n                >\n                    <Card >\n                        <CardContent>\n                            <Typography variant=\"h4\" component=\"h2\" color='error'>\n                                Unable to fecth the location\n                                \n                            </Typography>\n                            <Typography variant='h5'>\n                                <br />\n                                Possible problem would be:\n                            </Typography>\n                            <Typography color=\"textSecondary\">\n                                <br />\n                                1. Please enable the location service on your browser. To enable it please refresh the page and allow the location service.\n                            </Typography>\n                            <Typography color=\"textSecondary\">\n                                <br />\n                                2. If you are running in development mode please run on chrome browser.\n                            </Typography>\n                            \n                        </CardContent>\n                        <CardActions>\n                            <Button onClick={this.refresh} size=\"small\">Refresh</Button>\n                        </CardActions>\n                    </Card>\n                </Box>\n            )\n        } else {\n            if (!this.state.initialLocationSet) {\n                return (\n                    <Box\n                        position={'absolute'}\n                        top={0}\n                        left={0}\n                        height={'100vh'}\n                        width={'100vw'}\n                        bgcolor={'rgba(255,255,255, 0.7)'}\n                        display={'flex'}\n                        justifyContent={'center'}\n                        alignItems={'center'}\n                    >\n                        <Loader />\n                    </Box>\n                )\n            } else {\n                return (\n                    null\n                )\n            }\n        }\n    }\n    \n    render() {\n        return this.renderComponent()\n    }\n}\n\nexport default geolocated()(CurrentLocation)","const mapUrl = {\n    base: `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_API}&v=3.exp&libraries=geometry,drawing,places`,\n    direction: 'https://www.google.com/maps/dir/?api=1'\n}\n\nexport { mapUrl }\n\n","import Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { mapUrl } from 'configurations/urls/mapUrl';\nimport PropType from 'prop-types';\nimport React, { Component } from 'react';\nimport { InfoWindow, Marker } from \"react-google-maps\";\nimport { stateSetter } from '../../../helpers/global';\n\nexport default class CustomMapMarker extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            infoShown: false\n        }\n\n        this.setter = stateSetter(this)\n    }\n\n    static propTypes = {\n        marker: PropType.object.isRequired\n    }\n\n    toggleInfo = () => {\n        this.setter.setState({infoShown: !this.state.infoShown})\n    }\n\n    getDirection = () => {\n        const { marker } = this.props;\n        const destination = encodeURIComponent(marker.name + \", \" +marker.vicinity)\n        window.open(`${mapUrl.direction}&destination_place_id=${marker.place_id}&destination=${destination}`)\n    }\n\n    componentWillUnmount() {\n        this.setter.cancel()\n    }\n\n    render() {\n        const { marker } = this.props\n        return (\n            <Marker\n                position={{ lat: marker.latitude, lng: marker.longitude }}\n                onClick={this.toggleInfo}\n            >\n                {\n                    this.state.infoShown &&\n                    <InfoWindow\n                        onCloseClick={this.toggleInfo}\n                        visible={this.state.infoShown}\n                    >\n                        <div style={{padding: 16}}>\n                            <div>\n                                <Typography variant=\"subtitle1\">\n                                    {`${marker.name}, ${marker.vicinity}`}\n                                </Typography>\n                            </div>\n                            <div style={{ textAlign: 'right' }}>\n                                <Button color=\"secondary\" onClick={this.getDirection}>\n                                    Get Directions\n                                </Button>\n                            </div>\n                        </div>\n                    </InfoWindow>\n                }\n            </Marker>\n        )\n    }\n}\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Autocomplete from 'react-google-autocomplete';\n\n\nexport default class SearchPalces extends Component {\n    static propTypes = {\n        setCurrentLocation: PropTypes.func\n    }\n\n    onPlaceSelected = (place) => {\n        if (place.geometry) {\n            let currentPostion = {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n            }\n            this.props.setCurrentLocation(currentPostion);\n        }\n    }\n    render() {\n        return (\n            <Autocomplete\n                style={{\n                    width: '100%',\n                    height: '40px',\n                    paddingLeft: '16px',\n                    marginTop: '10px',\n                    marginBottom: '100px'\n                }}\n                onPlaceSelected={ this.onPlaceSelected }\n                types={['(regions)']}\n            />\n        )\n    }\n}\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { GoogleMap, Marker, withGoogleMap, withScriptjs } from \"react-google-maps\";\nimport CustomMapMarker from './CustomMapMarker';\nimport SearchPalces from './SearchPalces';\n\nclass Map extends Component {\n    // constructor(props) {\n    //     super(props);\n    // }\n    static propTypes = {\n        latitude: PropTypes.number,\n        longitude: PropTypes.number,\n        isMarkerShown: PropTypes.bool,\n        setCurrentLocation: PropTypes.func\n    }\n\n    static defaultProps = {\n        isMarkerShown: true,\n        // latitude: 18.9908177,\n        // longitude: 72.8382547\n    }\n    \n    render() {\n        return (\n            <GoogleMap\n                ref={this.props.onMapMounted}\n                defaultZoom={12}\n                center={{ lat: this.props.latitude, lng: this.props.longitude }}\n            >\n                {this.props.isMarkerShown && <Marker position={{ lat: this.props.latitude, lng: this.props.longitude }} />}\n                \n                {this.props.places.map(marker => (\n                    <CustomMapMarker\n                        key={marker.id}\n                        marker={marker}\n                    />\n                ))}\n                \n                <SearchPalces\n                    setCurrentLocation={this.props.setCurrentLocation}\n                />\n            </GoogleMap>\n        )\n    }\n}\n\nexport default withScriptjs(withGoogleMap(Map))\n","import Box from '@material-ui/core/Box';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport Loader from 'helpers/components/Loader';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { mapUrl } from '../../configurations/urls/mapUrl';\nimport Map from './components/Map';\n\nexport default class MapWrapper extends Component {\n    static propTypes = {\n        loading: PropTypes.bool.isRequired,\n        currentLocation: PropTypes.object.isRequired,\n        places: PropTypes.array.isRequired,\n        types: PropTypes.array.isRequired,\n        selectedTypes: PropTypes.array.isRequired,\n        setCurrentLocation: PropTypes.func.isRequired,\n        filterChange: PropTypes.func.isRequired,\n        onMapMounted: PropTypes.func,\n    }\n\n    getCheckBox = (type, index) => {\n        const isChecked = this.props.selectedTypes.includes(type);\n        return (\n            <FormControlLabel\n                control={\n                    <Checkbox\n                        checked={isChecked}\n                        onChange={this.props.filterChange(type)}\n                        value={type}\n                        color='primary'\n                    />\n                }\n                label={type}\n                key={index}\n            />\n        )\n    }\n\n    render() {\n        console.log('map wrapper render')\n        return (\n            <Grid key={1} container style={{overflow: 'auto'}}>\n                <Grid item xs={12} sm={8} md={8} lg={8} style={{marginBottom: 40}}>\n                    <Map\n                        latitude={this.props.currentLocation.latitude}\n                        longitude={this.props.currentLocation.longitude}\n                        googleMapURL={mapUrl.base}\n                        loadingElement={<Loader />}\n                        containerElement={<div style={{  height: `400px` }} />}\n                        mapElement={<div style={{ height: '100%' }} />}\n                        setCurrentLocation={this.props.setCurrentLocation}\n                        onMapMounted={this.props.onMapMounted}\n                        places={this.props.places}\n                    />\n                            \n                </Grid>\n                <Grid item xs={12} sm={4} md={4} lg={4}>\n                    <Box color=\"text.primary\" p={4}>\n                        <FormControl component=\"fieldset\" >\n                            <FormLabel component=\"legend\">Filter Places</FormLabel>\n                                <FormGroup>\n                                {this.props.types.map((type, index) => (\n                                    this.getCheckBox(type, index)\n                                ))}\n                                </FormGroup>\n                        </FormControl>\n                    </Box>\n                </Grid>\n            </Grid>\n        )\n        \n    }\n}\n","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport { geoPropTypes } from \"react-geolocated\";\nimport { stateSetter, types } from '../../helpers/global';\nimport CurrentLocation from './components/CurrentLocation';\nimport MapWrapper from './MapWrapper';\n\nclass MapContainer extends Component {\n    static propTypes = {\n        ...geoPropTypes\n    }\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            currentLocation: {},\n            places: [],\n            types: types,\n            selectedTypes: []\n        }\n        this.mapRef = null;\n        this.google = null;\n        this.setter = stateSetter(this)\n    }\n\n    componentDidMount() { \n        this.google = window.google;\n    }\n\n    setCurrentLocation = ({ latitude, longitude }) => {\n        console.log('setCurrentLocation called')\n        // this.setter.setState({ loading: true }, () => {\n        let currentLocation = { ...this.state.currentLocation, latitude, longitude }\n        this.fetchPlaces(latitude, longitude, this.state.selectedTypes).then(places => {\n            console.log( places)    \n            this.setter.setState({currentLocation: currentLocation, places, loading: false})\n        })\n        // })\n    }\n    \n    onMapMounted = ref => { \n        this.mapRef = ref\n    }\n\n    filterChange = name => event => { \n        console.log(name, event.target.checked)\n        const isChecked = event.target.checked;\n        let selectedTypes = [...this.state.selectedTypes];\n        if (!isChecked) {\n            let index = _.findIndex(selectedTypes, (type) => { \n                return type === name\n            })\n            if (index >= 0) {\n                selectedTypes.splice(index, 1)\n            }\n        } else {\n            selectedTypes.push(name);\n        }\n        this.fetchPlaces(this.state.currentLocation.latitude, this.state.currentLocation.longitude, selectedTypes).then(places => {\n            this.setter.setState({ places: places, selectedTypes: selectedTypes })\n        })\n    }\n\n    fetchPlaces = (latitude, longitude, types) => {\n        return new Promise((resolve, reject) => {\n            if (this.mapRef) {\n                let places = [];\n                const google = window.google;\n                // const bounds = this.mapRef.getBounds();\n                const service = new google.maps.places.PlacesService(this.mapRef.context.__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED);\n                const request = {\n                    // bounds: bounds,\n                    type: types ? types : this.state.selectedTypes,\n                    location: {\n                        lat: latitude ? latitude : this.state.currentLocation.latitude,\n                        lng: longitude ? longitude : this.state.currentLocation.longitude,\n                    },\n                    radius: 5000\n                };\n                service.nearbySearch(request, (results, status) => {\n                    console.log(results);\n                    if (status === google.maps.places.PlacesServiceStatus.OK && !_.isEmpty(types)) {\n                        _.map(results, (place) => {\n                            let placeObj = {\n                                latitude: place.geometry.location.lat(),\n                                longitude: place.geometry.location.lng(),\n                                icon: place.icon,\n                                name: place.name,\n                                id: place.place_id,\n                                vicinity: place.vicinity\n                            }\n                            places.push(placeObj)\n                        })\n                        // this.setter.setState({places})\n                    }\n                    resolve(places)\n                })\n            } else {\n                resolve([])\n            }\n        })\n    }\n\n    componentWillUnmount() {\n        this.setter.cancel()\n    }\n\n    getComponent = () => {\n        if (this.state.loading) {\n            return (\n                <CurrentLocation\n                    key={0}\n                    getLocation={this.state.loading}\n                    setCurrentLocation={this.setCurrentLocation}\n                />)\n        } else { \n            return (\n                <MapWrapper\n                    key={1}\n                    loading={this.state.loading}\n                    currentLocation={this.state.currentLocation}\n                    setCurrentLocation={this.setCurrentLocation}\n                    onMapMounted={this.onMapMounted}\n                    fetchPlaces={this.fetchPlaces}\n                    places={this.state.places}\n                    types={this.state.types}\n                    selectedTypes={this.state.selectedTypes}\n                    filterChange={this.filterChange}\n                />\n            )\n        }\n    }\n    \n    render() {\n        return this.getComponent()\n    }\n}\n\nexport default MapContainer;\n","import { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nlet theme = createMuiTheme({\n    palette: {\n      type: 'dark'\n    }\n})\n  \ntheme = responsiveFontSizes(theme);\n\nexport { theme };\n\n","import Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport { ThemeProvider } from '@material-ui/styles';\nimport MapContainer from 'components/maps/MapContainer';\nimport { theme } from 'configurations/materialUI/theme';\nimport React from 'react';\nimport 'typeface-roboto';\n// import './App.css';\n\nfunction App() {\n  return (\n    <NoSsr defer={true}>\n      <CssBaseline />\n      <ThemeProvider theme={theme}>\n          <Box width=\"100vw\" bgcolor={'background.paper'}>\n            <Container fluid=\"true\" style={{minHeight: '100%', padding: 0,}} >\n              <Box height=\"100vh\" width=\"100%\" display={'flex'} boxShadow={3} borderRadius=\"borderRadius\" bgcolor={'background.default'} p={2} overflow=\"visible\">\n                <MapContainer />\n              </Box>\n            </Container>\n          </Box>\n      </ThemeProvider>\n    </NoSsr>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}