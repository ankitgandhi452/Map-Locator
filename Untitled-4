import React, { Component } from 'react';
import { geoPropTypes } from "react-geolocated";
import { stateSetter } from '../../helpers/global';
import MapWrapper from './MapWrapper';


class MapContainer extends Component {
    static propTypes = {
        ...geoPropTypes
    }
    constructor(props) {
        super(props);
        this.state = {
            loading: true,
            currentLocation: {}
        }
        this.mapRef = null;
        this.setter = stateSetter(this)
    }

    setCurrentLocation = ({ latitude, longitude }) => {
        this.setter.setState({ loading: true }, () => {
            let currentLocation = { ...this.state.currentLocation, latitude, longitude }
            console.log("setCurrentLocation", currentLocation)
            this.setter.setState({currentLocation: currentLocation, loading: false})
        })
    }
    
    onMapMounted = ref => { 
        this.mapRef = ref
    }

    fetchPlaces = updatedPlces => {
        console.log('fetchPlaces', updatedPlces)
    }

    shouldComponentUpdate(nextProps, nextState) { 
        return this.state.currentLocation.latitude !== nextState.currentLocation.latitude
    }

    componentDidUpdate() { 
        console.log(this.state)
    }

    componentWillUnmount() {
        this.setter.cancel()
    }
    
    render() {
        console.log(this.state)
        return (
            <MapWrapper
                loading={this.state.loading}
                currentLocation={this.state.currentLocation}
                setCurrentLocation={this.setCurrentLocation}
                onMapMounted={this.onMapMounted}
                fetchPlaces={this.fetchPlaces}
            />
        )
    }
}

export default MapContainer;
